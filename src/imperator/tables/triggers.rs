use crate::everything::Everything;
use crate::item::Item;
use crate::scopes::*;
use crate::token::Token;
use crate::trigger::{RawTrigger, Trigger};

use RawTrigger::*;

pub fn scope_trigger(name: &Token, data: &Everything) -> Option<(Scopes, Trigger)> {
    let name_lc = name.as_str().to_lowercase();

    // TODO: binary search might be faster
    if let Some((from, trigger)) = TRIGGER_MAP.get(&name_lc) {
        return Some((*from, trigger.clone()));
    }
    if let Some(conviction) = name_lc.strip_suffix("_conviction") {
        data.verify_exists_implied(Item::PartyType, conviction, name);
        return Some((Scopes::Character, Trigger::CompareValue)));
    }
    if let Some(support) = name_lc.strip_suffix("_support") {
        data.verify_exists_implied(Item::PartyType, support, name);
        return Some((Scopes::Country, Trigger::CompareValue)));
    }
    if let Some(happiness) = name_lc.strip_suffix("_happiness") {
        data.verify_exists_implied(Item::PopType, happiness, name);
        return Some((Scopes::Province, Trigger::CompareValue)));
    }
    if let Some(part) = name.as_str().strip_prefix("num_of_") {
        if warn
            && !data.item_exists(Item::Building, part)
            && !data.item_exists(Item::PopType, s)
        {
            let msg = format!("could not find any {part}");
            let info = "Possible valid options would be: num_of_$POPTYPE$ or num_of_$BUILDING$";
            warn_info(name, ErrorKey::MissingItem, &msg, info);
        }
        return Some((Scopes::Country, Trigger::CompareValue)));
    }
    // This one is weird...the trigger is just Item::TechnologyTable with no suffix or prefix.
    if data.verify_exists_implied(Item::TechnologyTable, "", name) {
        return Some((Scopes::Country, Trigger::CompareValue)));
    }
    std::option::Option::None
}

static TRIGGER_MAP: Lazy<FnvHashMap<String, (Scopes, Trigger)>> = Lazy::new(|| {
    let mut hash = FnvHashMap::default();
    for (from, s, trigger) in TRIGGER {
        hash.insert(
            (*s).to_string(),
            (Scopes::from_bits_truncate(*from), Trigger::from_raw(trigger)),
        );
    }
    hash
});

/// LAST UPDATED VIC3 VERSION 1.3.6
/// See `triggers.log` from the game data dumps
/// A key ends with '(' if it is the version that takes a parenthesized argument in script.
const TRIGGER: &[(u64, &str, RawTrigger)] = &[
    (None, "debug_log", UncheckedValue),
    (None, "debug_log_details", UncheckedValue),
    // State Triggers
    (State, "can_change_governor_policy", Boolean),
    (State, "can_import_trade_good", Boolean),
    (State, "has_any_great_work_state", Boolean),
    (State, "has_governor", Boolean),
    (State, "has_state_food", CompareValue),
    (State, "has_state_food_capacity", CompareValue),
    (State, "has_state_modifier", Item(Item::Modifier)),
    (State, "incoming_trade_routes", CompareValue),
    (State, "is_capital_state", Boolean),
    (State, "outgoing_trade_routes", CompareValue),
    (State, "state_commerce_income", CompareValue),
    (State, "state_level_loyalty", CompareValue),
    (State, "state_monthly_food_income", CompareValue),
    (State, "trade_good_exports", Block(&[("target", Item(Item::TradeGood)), ("value", CompareValue)])),
    (State, "trade_good_imports", Block(&[("target", Item(Item::TradeGood)), ("value", CompareValue)])),
    (State, "trade_good_surplus", Block(&[("target", Item(Item::TradeGood)), ("value", CompareValue)])),
    (State, "trade_routes", CompareValue),
    (State, "unused_trade_routes", CompareValue),
    // Unit Triggers
    (Unit, "days_since_last_unit_victory", CompareValue),
    (Unit, "experience_percentage", CompareValue),
    (Unit, "food_percentage", CompareValue),
    (Unit, "has_commander", Boolean),
    (Unit, "has_siege_impact", Boolean),
    (Unit, "has_unit_modifier", Item(Item::Modifier)),
    (Unit, "in_combat", Boolean),
    (Unit, "in_siege", Boolean),
    (Unit, "is_army", Boolean),
    (Unit, "is_carrying_troops", Boolean),
    (Unit, "in_siege", Boolean),
    (Unit, "is_dominant_unit", Boolean),
    (Unit, "is_exiled", Boolean),
    (Unit, "is_idle", Boolean),
    (Unit, "is_moving", Boolean),
    (Unit, "is_navy", Boolean),
    (Unit, "is_unit_ability_used", Item(Item::UnitAbility)),
    (Unit, "is_unit_locked", Boolean),
    (Unit, "morale_percentage", CompareValue),
    (Unit, "num_of_loyal_cohorts", CompareValue),
    (Unit, "num_of_migrants", CompareValue),
    (Unit, "strength_percentage", CompareValue),
    (Unit, "unit_size", CompareValue),
    (Unit, "unit_size_rank", CompareValue),
    (Unit, "unit_size_rank_percentage", CompareValue),
    (Unit, "unit_threat", CompareValue),
    // Great Work Triggers
    (GreatWork, "great_work_any_material", Item(Item::GreatWorkMaterial)),
    (GreatWork, "great_work_builder", Scope(Country)),
    (GreatWork, "great_work_category", Item(Item::GreatWorkCategory)),
    (GreatWork, "great_work_min_effect_tier", CompareValue),
    (GreatWork, "great_work_only_material", Item(Item::GreatWorkMaterial)),
    (GreatWork, "is_ancient_wonder", Boolean),
    // Character Triggers
    (Character, "age", CompareValue),
    (Character, "can_add_entire_loyalty_bonus", Item(Item::Loyalty)),
    (Character, "can_get_friends", Boolean),
    (Character, "can_get_rivals", Boolean),
    (Character, "can_hold_office", Item(Item::Office)),
    (Character, "character_experience", CompareValue),
    (Character, "charisma", CompareValue),
    (Character, "corruption", CompareValue),
    (Character, "current_party_conviction", CompareValue),
    (Character, "days_since_last_victory", CompareValue),
    (Character, "fertility", CompareValue),
    (Character, "finesse", CompareValue),
    (Character, "from_ruler_family", Boolean),
    (Character, "has_ambition", Item(Item::Ambition)),
    (Character, "has_any_office", Boolean),
    (Character, "has_character_modifier", Item(Item::Modifier)),
    (Character, "has_culture", Scope(Culture) | Item(Item::Culture)),
    (Character, "has_culture_group", Scope(Culture) | Item(Item::Culture)),
    (Character, "has_father", Boolean),
    (Character, "has_holding_in", Scope(Province)),
    (Character, "has_job", Boolean),
    (Character, "has_loyalty", Item(Item::Loyalty)),
    (Character, "has_mother", Boolean),
    (Character, "has_nickname", Boolean),
    (Character, "has_office", Item(Item::Office)),
    (Character, "has_religion", Scope(Religion) | Item(Item::Religion)),
    (Character, "has_same_culture_group_as", Scope(Character)),
    (Character, "has_same_family", Scope(Character)),
    (Character, "has_same_religion_as", Scope(Character)),
    (Character, "has_tech_office", Boolean),
    (Character, "has_tech_office_of", Item(Item::TechnologyTable)),
    (Character, "has_trait", Item(Item::CharacterTrait)),
    (Character, "has_triggered_character_modifier", Item(Item::Modifier)),
    (Character, "health", CompareValue),
    (Character, "highest_skill", Choice(&["martial", "finesse", "charisma", "zeal"])),
    (Character, "in_command", Boolean),
    (Character, "is_admiral", Boolean),
    (Character, "is_adult", Boolean),
    (Character, "is_alive", Boolean),
    (Character, "is_at_location", Scope(Province)),
    (Character, "is_at_same_location", Scope(Character)),
    (Character, "is_banished", Boolean),
    (Character, "is_bastard", Boolean),
    (Character, "is_child_of", Scope(Character)),
    (Character, "is_clan_chief", Boolean),
    (Character, "is_close_relative", Scope(Character)),
    (Character, "is_co_ruler", Boolean),
    (Character, "is_courtier", Boolean),
    (Character, "is_deified", Boolean),
    (Character, "is_female", Boolean),
    (Character, "is_friend", Scope(Character)),
    (Character, "is_general", Boolean),
    (Character, "is_governor", Boolean),
    (Character, "is_head_of_family", Boolean),
    (Character, "is_leader_of_party", Item(Item::PartyType)),
    (Character, "is_leader_of_party_type", Item(Item::PartyType)),
    (Character, "is_male", Boolean),
    (Character, "is_married", Boolean),
    (Character, "is_mercenary", Boolean),
    (Character, "is_minor_character", Boolean),
    (Character, "is_parent_of", Scope(Character)),
    (Character, "is_party_leader", Boolean),
    (Character, "is_pregnant", Boolean),
    (Character, "is_pretender", Boolean),
    (Character, "is_previous_ruler", Boolean),
    (Character, "is_primary_heir", Boolean),
    (Character, "is_rival", Scope(Character)),
    (Character, "is_ruler", Boolean),
    (Character, "is_same_gender", Scope(Character)),
    (Character, "is_same_party_as", Scope(Character)),
    (Character, "is_sibling_of", Scope(Character)),
    (Character, "is_spouse_of", Scope(Character)),
    (Character, "is_successor", Boolean),
    (Character, "loyalty", CompareValue),
    (Character, "martial", CompareValue),
    (Character, "num_character_treasures", CompareValue),
    (Character, "num_holdings_owned", CompareValue),
    (Character, "num_loyal_cohorts", CompareValue),
    (Character, "num_loyal_veterans", CompareValue),
    (Character, "num_of_children", CompareValue),
    (Character, "num_of_friends", CompareValue),
    (Character, "num_of_rivals", CompareValue),
    (Character, "num_of_supporters", CompareValue),
    (Character, "number_of_health_traits", CompareValue),
    (Character, "number_of_military_traits", CompareValue),
    (Character, "number_of_personality_traits", CompareValue),
    (Character, "number_of_status_traits", CompareValue),
    (Character, "number_of_traits", CompareValue),
    (Character, "party", Scope(Party)),
    (Character, "party_type", Item(Item::PartyType)),
    (Character, "popularity", CompareValue),
    (Character, "power_base", CompareValue),
    (Character, "prisoner", Boolean),
    (Character, "prominence", CompareValue),
    (Character, "relative_power_base", CompareValue),
    (Character, "title_importance", CompareValue),
    (Character, "wealth", CompareValue),
    (Character, "zeal", CompareValue),
    // Pop Triggers
    (Pop, "pop_can_move", Boolean),
    (Pop, "pop_culture", Scope(Culture) | Item(Item::Culture)),
    (Pop, "pop_culture_group", Scope(CultureGroup) | Item(Item::CultureGroup)),
    (Pop, "pop_hapiness", CompareValue),
    (Pop, "pop_religion", Scope(Religion) | Item(Item::CultureGroup)),
    (Pop, "pop_type", Item(Item::PopType)),
    // Country Triggers
    (Country | Character | Province, "treasure_count", CompareValue),
    (Country, "alliance_with", Scope(Country)),
    (Country, "biggest_party", Scope(Party) | Item(Item::PartyType)),
    (Country, "alliance_with", Scope(Country)),
    (Country, "can_activate", Scope(Deity)),
    (Country, "can_change_idea", Item(Item::Idea)),
    (Country, "can_pay_price", Item(Item::Price)),
    (Country, "centralization", CompareValue),
    (Country, "civil_war_with", Scope(Country)),
    (Country, "country_culture_group", Item(Item::CultureGroup)),
    (Country, "country_population", CompareValue),
    (Country, "country_trade_good_exports", Block(&[("target", Item(Item::TradeGood)), ("value", CompareValue)])),
    (Country, "country_trade_good_imports", Block(&[("target", Item(Item::TradeGood)), ("value", CompareValue)])),
    (Country, "cultural_unity", CompareValue),
    (Country, "days_since_last_war", CompareValue),
    (Country, "diplomatic_stance", Item(Item::DiplomaticStance)),
    (Country, "distress_level", CompareValue),
    (Country, "exports_to", Scope(Country)),
    (Country, "gender_equality", Boolean),
    (Country, "government", Item(Item::Government)),
    (Country, "has_aggressive_expansion", CompareValue),
    (Country, "has_any_great_work_country", Boolean),
    (Country, "has_any_omen", Boolean),
    (Country, "has_civil_war", Boolean),
    (Country, "has_co_ruler_government", Boolean),
    (Country, "has_coasts", Boolean),
    (Country, "has_completed_mission", Item(Item::Mission)),
    (Country, "has_completed_mission_task", Item(Item::MissionTask)),
    (Country, "has_country_great_work_effect", Item(Item::GreatWorkEffect)),
    (Country, "has_country_modifier", Item(Item::Modifier)),
    (Country, "has_deity_in_pantheon", Scope(Deity)),
    (Country, "has_high_economic_policy", Item(Item::EconomicPolicy)),
    (Country, "has_land", Boolean),
    (Country, "has_law", Item(Item::Law)),
    (Country, "has_low_economic_policy", Item(Item::EconomicPolicy)),
    (Country, "has_mid_economic_policy", Item(Item::EconomicPolicy)),
    (Country, "has_military_access", Scope(Country)),
    (Country, "has_military_bonus", Item(Item::MilitaryTradition)),
    (Country, "has_monthly_balance", CompareValue),
    (Country, "has_monthly_income", CompareValue),
    (Country, "has_opinion", Block(&[("modifier", Item(Item::Opinion)), ("target", Scope(Country))])),
    (Country, "has_party_type", Item(Item::PartyType)),
    (Country, "has_primary_heir", Boolean),
    (Country, "has_senate_approval", CompareValue),
    (Country, "has_subject_loyalty", CompareValue),
    (Country, "has_this_omen", Scope(Deity) | Item(Item::Deity)),
    (Country, "has_truce_with", Scope(Country)),
    (Country, "has_war_exhaustion", CompareValue),
    (Country, "has_subject_loyalty", CompareValue),
    (Country, "healthy_economy_percentage", CompareValue),
    (Country, "heritage", Item(Item::Heritage)),
    (Country, "idea", Item(Item::Idea)),
    (Country, "imports_from", Scope(Country)),
    (Country, "in_diplomatic_range", Scope(Country)),
    (Country, "invention", Item(Item::Invention)),
    (Country, "is_ai", Boolean),
    (Country, "is_antagonist", Boolean),
    (Country, "is_guaranteed_by", Scope(Country)),
    (Country, "is_monarchy", Boolean),
    (Country, "is_monotheist_deity", Scope(Deity)),
    (Country, "is_republic", Boolean),
    (Country, "is_subject", Boolean),
    (Country, "is_subject_of", Scope(Country)),
    (Country, "is_subject_type", Item(Item::SubjectType)),
    (Country, "is_tradition_tree_allowed", Item(Item::MilitaryTraditionTree)),
    (Country, "is_tribal", Boolean),
    (Country, "is_tutorial_active", Boolean),
    (Country, "legitimacy", CompareValue),
    (Country, "manpower", CompareValue),
    (Country, "manpower_percentage", CompareValue),
    (Country, "max_diplomatic_relations", CompareValue),
    (Country, "max_manpower", CompareValue),
    (Country, "migration_strategy", CompareValue),
    (Country, "military_experience", CompareValue),
    (Country, "months_to_war", CompareValue),
    (Country, "naval_dominance", CompareValue),
    (Country, "non_loyal_power_base", CompareValue),
    (Country, "num_active_relations", CompareValue),
    (Country, "num_allowed_families", CompareValue),
    (Country, "num_of_cities", CompareValue),
    (Country, "num_of_civic_ideas", CompareValue),
    (Country, "num_of_cohorts", CompareValue),
    (Country, "num_of_controlled_cities", CompareValue),
    (Country, "num_of_deified_rulers_in_pantheon", CompareValue),
    (Country, "num_of_families", CompareValue),
    (Country, "num_of_military_ideas", CompareValue),
    (Country, "num_of_oratory_ideas", CompareValue),
    (Country, "num_of_ports", CompareValue),
    (Country, "num_of_provinces", CompareValue),
    (Country, "num_of_religious_ideas", CompareValue),
    (Country, "num_of_ships", CompareValue),
    (Country, "num_of_unit_type", Block(&[("type", Item(Item::Unit)), ("value", CompareValue)])),
    (Country, "office_is_empty", Boolean),
    (Country, "opinion", Block(&[("type", Scope(Country)), ("value", CompareValue)])),
    (Country, "owns", Scope(Province) | CompareValue),
    (Country, "owns_area", Scope(Area) | Item(Item::Area)),
    (Country, "owns_or_subject_owns", Scope(Province) | CompareValue),
    (Country, "owns_or_subject_owns_area", Scope(Area) | Item(Item::Area)),
    (Country, "owns_or_subject_owns_region", Scope(Region) | Item(Item::Region)),
    (Country, "owns_region", Scope(Region) | Item(Item::Region)),
    (Country, "percentage_characters_below_max_loyalty", CompareValue),
    (Country, "political_influence", CompareValue),
    (Country, "possible_holdings", CompareValue),
    (Country, "primary_culture", Item(Item::Culture) | Scope(Culture)),
    (Country, "rank", CompareValue),
    (Country, "religion", Item(Item::Religion) | Scope(Religion)),
    (Country, "religious_unity", CompareValue),
    (Country, "safety", CompareValue),
    (Country, "stability", CompareValue),
    (Country, "tag", Scope(Country)),
    (Country, "threat_in_owned_land", CompareValue),
    (Country, "total_holdings", CompareValue),
    (Country, "total_power_base", CompareValue),
    (Country, "towards_civil_war", Boolean),
    (Country, "treasury", CompareValue),
    (Country, "tyranny", CompareValue),
    (Country, "war", Boolean),
    (Country, "war_with", Scope(Country)),
    (Country, "culture_pops_in_country", Block(&[("target", Scope(CountryCulture)), ("value", CompareValue)])),
    (Country, "is_monotheist_religion", Boolean),
    // Subunit triggers
    (SubUnit, "cohort_food_consumption", CompareValue),
    (SubUnit, "cohort_food_storage_capacity", CompareValue),
    (SubUnit, "has_personal_loyalty", Boolean),
    (SubUnit, "is_cohort", Boolean),
    (SubUnit, "is_migration", Boolean),
    (SubUnit, "is_ship", Boolean),
    (SubUnit, "ship_category", Choice(&["light", "medium", "heavy"])),
    (SubUnit, "sub_unit_type", Item(Item::Unit)),
    (SubUnit, "subunit_morale_percentage", CompareValue),
    (SubUnit, "subunit_strength_percentage", CompareValue),
    // Unit triggers
    (Unit | Character | Governorship, "has_legion_trigger", Boolean),
    // Party triggers
    (Party, "has_active_agenda", Boolean),
    (Party, "has_power_percentage", CompareValue),
    (Party, "is_party_type", Item(Item::PartyType)),
    (Party, "party_approval", CompareValue),
    // Family triggers
    (Family, "is_grateful", Boolean),
    (Family, "is_scorned", Boolean),
    (Family, "num_of_expected_jobs", CompareValue),
    (Family, "num_of_jobs", CompareValue),
    (Family, "num_of_members", CompareValue),
    (Family, "prestige", CompareValue),
    // Legion triggers
    (Legion, "can_add_commander", Boolean),
    (Legion, "commander_count", CompareValue),
    (Legion, "distinction_count", CompareValue),
    (Legion, "has_distinction", Item(Item::LegionDistinction)),
    (Legion, "unit_count", CompareValue),
    // Siege triggers
    (Siege, "has_breach", Boolean),
    // War triggers
    (War, "is_civil_war", Boolean),
    (War, "has_breach", Boolean),
    (War, "is_war_leader", Scope(Country)),
    (War, "is_war_over", Boolean),
    (War, "war_score", Block(&[("target", Scope(Country)), ("value", CompareValue)])),
    // Deity triggers
    (Deity, "deity_religion", Item(Item::Religion) | Scope(Religion)),
    (Deity, "has_holy_site", Boolean),
    // TODO - These 2 should be country modifiers from ModifKinds::Country
    (Deity, "has_active_modifier", UncheckedValue),
    (Deity, "has_passive_modifier", UncheckedValue), 
    // Province triggers
    (Province, "ai_wants_road", Scope(Country)),
    (Province, "can_build_building", Item(Item::Building)),
    (Province, "can_have_port", Boolean),
    // TODO - This should be "Special" and only be usable in files inside common/unit_abilities
    (Province, "can_use_unit_ability", Item(Item::UnitAbility)),
    (Province, "civilization_value", CompareValue),
    (Province, "control_range", Scope(Country)),
    (Province, "distance_to_migration_target", CompareValue),
    (Province, "dominant_province_culture", Item(Item::Culture) | Scope(Culture)),
    (Province, "dominant_province_religion", Item(Item::Religion) | Scope(Religion)),
    (Province, "fort_level", CompareValue),
    (Province, "free_building_slots", CompareValue),
    (Province, "governor_policy", Item(Item::GovernorPolicy)),
    (Province, "great_work_locator_is_free", Choice(&["primary_great_work", "secondary_great_work"])),
    (Province, "has_ancient_wonder", UncheckedValue),
    (Province, "has_building", Item(Item::Building)),
    (Province, "has_city_status", Boolean),
    (Province, "has_construction", Boolean),
    (Province, "has_enemy_army", Scope(Country)),
    (Province, "has_enemy_navy", Scope(Country)),
    (Province, "has_great_work", Boolean),
    (Province, "has_minor_river", Boolean),
    (Province, "has_owner", Boolean),
    (Province, "has_province_modifier", Item(Item::Modifier)),
    (Province, "has_province_rank", Item(Item::ProvinceRank)),
    (Province, "has_road_towards", Scope(Country)),
    (Province, "has_siege", Boolean),
    (Province, "has_specific_construction", Boolean),
    (Province, "has_winter", Boolean),
    (Province, "is_adjacent_to_major_river", Boolean),
    (Province, "is_capital", Boolean),
    (Province, "is_coastal", Boolean),
    (Province, "is_colonizer", Scope(Country)),
    (Province, "is_core_of", Scope(Country)),
    (Province, "is_holy_site", Boolean),
    (Province, "is_importing_trade_good", Item(Item::TradeGood)),
    (Province, "is_in_area", Item(Item::Area)) | Scope(Area),
    (Province, "is_in_region", Item(Item::Region) | Scope(Region)),
    (Province, "is_inhabitable", Boolean),
    (Province, "is_model_shown", UncheckedValue),
    (Province, "is_neighbor", Scope(Province)),    
    (Province, "is_port", Boolean),
    (Province, "is_previous_controller", Scope(Country)),
    (Province, "is_previous_owner", Scope(Country)),
    (Province, "is_sea", Boolean),
    (Province, "is_state_capital", Boolean),
    (Province, "is_uninhabitable", Boolean),
    (Province, "num_goods_produced", CompareValue),
    (Province, "num_of_total_building_slots", CompareValue),
    (Province, "num_of_used_building_slots", CompareValue),
    (Province, "num_other_religion", CompareValue),
    (Province, "num_province_treasures", CompareValue),
    (Province, "owned_or_subject_owned", Scope(Country)),
    (Province, "population_cap", CompareValue),
    (Province, "province_dominant_culture_group", Item(Item::Culture)),
    (Province, "province_id", CompareValue),
    (Province, "province_income", CompareValue),
    (Province, "province_manpower_income", CompareValue),
    (Province, "province_tax_income", CompareValue),
    (Province, "province_unrest", CompareValue),
    (Province, "state_loyalty", CompareValue),
    (Province, "terrain", Item(Item::TerrainType)),
    (Province, "total_population", CompareValue),
    (Province, "province_dominant_culture_group", Item(Item::TradeGood)),
    // Country Culture triggers
    (CountryCulture, "country_culture_pop_count", CompareValue),
    (CountryCulture, "has_country_culture_modifier", Item(Item::Modifier)),
    (CountryCulture, "has_pop_type_right", Item(Item::PopType)),
    (CountryCulture, "integration_progress", CompareValue),
    (CountryCulture, "has_pop_type_right", Item(Item::Culture) | Scope(Culture)),
    (CountryCulture, "is_integrated", Boolean),
    // None scope triggers
    (ALL_BUT_NONE, "add_to_temporary_list", Special),
    (None, "all_false", Control),
    (None, "always", Boolean),
    (None, "and", Control),
    (None, "assert_if", Block(&[("limit", Control), ("?text", UncheckedValue)])),
    (None, "assert_read", UncheckedValue),
    (None, "calc_true_if", Control),
    (None, "current_date", CompareDate),
    (None, "custom_tooltip", Special),
    (None, "debug_only", Boolean),
    (None, "exists", Special),
    (None, "game_start_date", CompareDate),
    (None, "gender_rules", Boolean),
    (
        None,
        "global_variable_list_size",
        Block(&[("name", UncheckedValue), ("value", CompareValue)]),
    ),
    (None, "has_agenda", UncheckedValue),
    (None, "has_dlc", Choice(&["Heirs of Alexander", "Epirus Flavor Pack", "Magna Graecia", "The Punic Wars", "Hellenistic World Flavor Pack"])),
    (None, "has_global_variable", UncheckedValue),
    (None, "has_global_variable_list", UncheckedValue),
    (None, "has_local_variable", UncheckedValue),
    (None, "has_local_variable_list", UncheckedValue),
    (None, "has_variable", UncheckedValue),
    (None, "has_variable_list", UncheckedValue),
    (None, "is_dynamic_tag", Boolean),
    (None, "is_in_list", Special),
    (None, "is_dynamic_tag", Boolean),
    (None, "is_iron_man", Boolean),
    (None, "is_target_alive", Scope(Character)),
    (
        None,
        "is_target_in_global_variable_list",
        Block(&[("name", UncheckedValue), ("*target", ScopeOkThis(ALL_BUT_NONE))]),
    ),
    (
        None,
        "is_target_in_local_variable_list",
        Block(&[("name", UncheckedValue), ("*target", ScopeOkThis(ALL_BUT_NONE))]),
    ),
    (
        None,
        "is_target_in_variable_list",
        Block(&[("name", UncheckedValue), ("*target", ScopeOkThis(ALL_BUT_NONE))]),
    ),
    (None, "list_size", Block(&[("name", UncheckedValue), ("value", CompareValue)])),
    (None, "local_variable_list_size", Block(&[("name", UncheckedValue), ("value", CompareValue)])),
    (None, "nand", Control),
    (None, "nor", Control),
    (None, "not", Control),
    (None, "or", Control),
    (None, "religion_pops_in_country", Block(&[("target", Scope(Religion) | Item(Item::Religion)), ("value", CompareValue)])),
    (ALL_BUT_NONE, "save_temporary_scope_as", Special),
    (None, "switch", Special),
    (None, "target_is_valid_character", Scope(Character)),
    (None, "trigger_else", Control),
    (None, "trigger_else_if", Control),
    (None, "trigger_if", Control),
    (None, "variable_list_size", Block(&[("name", UncheckedValue), ("value", CompareValue)])),
    (None, "weighted_calc_true_if", Special),
    (None, "in_color_list", UncheckedValue),
    (None, "is_color", UncheckedValue),
    // Pop triggers
    (None, "is_pop_type_right", Item(Item::PopType)),
];
